syntax = "proto3";

package klibisz.elastiknn;

option java_package = "com.klibisz.elastiknn";

import "scalapb/scalapb.proto";

enum Distance {
    DISTANCE_L1 = 0;
    DISTANCE_L2 = 1;
    DISTANCE_ANGULAR = 2;
    DISTANCE_HAMMING = 3;
    DISTANCE_JACCARD = 4;
}

enum VectorType {
    VECTOR_TYPE_DOUBLE = 0;
    VECTOR_TYPE_BOOL = 1;
}

message ProcessorOptions {
    // Path to the field where the raw vector is stored.
    string field_raw = 1;
    // Dimensionality of the raw floating-point vector.
    int32 dimension = 2;
    // Provide the vector type to prevent mixing vectors of different types.
    VectorType vector_type = 3;
    // The model options which will determine how the vector gets preprocessed and stored.
    oneof model_options {
        ExactModelOptions exact = 4;
        LshModelOptions lsh = 5;
    }
}

message ExactModelOptions {}

message LshModelOptions {
    // Hash functions for hashing incoming vectors are determined by this seed.
    int64 seed = 1;

    // Path to the field where the processed version of the vector is stored.
    string field_processed = 2;

    // The distance function used for queries. This has to be given up-front as it determines how the vector gets processed.
    Distance distance = 3;

    // Placeholders.. need to come back and get the exact lsh parameters straight. It's been a while since I learned it.
    int32 k = 4;
    int32 L = 5;
}

// A vector of doubles, used for l1, l2, and angular distances.
message DoubleVector {
    repeated double values = 1 [(scalapb.field).collection_type="Array"];
}

// A vector of booleans, used for Hamming and Jaccard distances.
message BoolVector {
    repeated bool values = 2 [(scalapb.field).collection_type="Array"];
}

// Generic representation of a vector.
message ElastiKnnVector {
    oneof vector {
        DoubleVector double_vector = 1;
        BoolVector bool_vector = 2;
    }
}


// Body and options for the elastiknn_knn query.
message KNearestNeighborsQuery {

    // Options for running an exact (exhaustive) query. This is only recommended for small datasets.
    message ExactQueryOptions {
        string field_raw = 1;
        Distance distance = 2;
    }

    // Options for running locality-sensitive-hashing queries.
    message LshQueryOptions {
        // Pipeline used to index the original vectors.
        string pipeline_id = 1;
        // TODO: regular and multi-probe lsh options here.
    }

    // Find the neighbors for a vector which has already been indexed.
    message IndexedQueryVector {
        string index = 1;
        string field = 2;
        string id = 3;
    }

    message GivenQueryVector {
        ElastiKnnVector vector = 1;
    }

    oneof query_options {
        ExactQueryOptions exact = 1;
        LshQueryOptions lsh = 2;
    }

    oneof query_vector {
        GivenQueryVector given = 3;
        IndexedQueryVector indexed = 4;
    }
}