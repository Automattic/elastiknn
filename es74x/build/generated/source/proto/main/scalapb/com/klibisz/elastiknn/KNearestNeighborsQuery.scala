// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package com.klibisz.elastiknn

/** Body and options for the elastiknn_knn query.
  */
@SerialVersionUID(0L)
final case class KNearestNeighborsQuery(
    pipelineId: _root_.scala.Predef.String = "",
    processorId: _root_.scala.Predef.String = "",
    k: _root_.scala.Int = 0,
    queryOptions: com.klibisz.elastiknn.KNearestNeighborsQuery.QueryOptions = com.klibisz.elastiknn.KNearestNeighborsQuery.QueryOptions.Empty,
    queryVector: com.klibisz.elastiknn.KNearestNeighborsQuery.QueryVector = com.klibisz.elastiknn.KNearestNeighborsQuery.QueryVector.Empty
    ) extends scalapb.GeneratedMessage with scalapb.Message[KNearestNeighborsQuery] with scalapb.lenses.Updatable[KNearestNeighborsQuery] {
    @transient
    private[this] var __serializedSizeCachedValue: _root_.scala.Int = 0
    private[this] def __computeSerializedValue(): _root_.scala.Int = {
      var __size = 0
      
      {
        val __value = pipelineId
        if (__value != "") {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(1, __value)
        }
      };
      
      {
        val __value = processorId
        if (__value != "") {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(2, __value)
        }
      };
      
      {
        val __value = k
        if (__value != 0) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeInt32Size(3, __value)
        }
      };
      if (queryOptions.exact.isDefined) {
        val __value = queryOptions.exact.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      if (queryOptions.lsh.isDefined) {
        val __value = queryOptions.lsh.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      if (queryVector.given.isDefined) {
        val __value = queryVector.given.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      if (queryVector.indexed.isDefined) {
        val __value = queryVector.indexed.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      __size
    }
    final override def serializedSize: _root_.scala.Int = {
      var read = __serializedSizeCachedValue
      if (read == 0) {
        read = __computeSerializedValue()
        __serializedSizeCachedValue = read
      }
      read
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      {
        val __v = pipelineId
        if (__v != "") {
          _output__.writeString(1, __v)
        }
      };
      {
        val __v = processorId
        if (__v != "") {
          _output__.writeString(2, __v)
        }
      };
      {
        val __v = k
        if (__v != 0) {
          _output__.writeInt32(3, __v)
        }
      };
      queryOptions.exact.foreach { __v =>
        val __m = __v
        _output__.writeTag(4, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      queryOptions.lsh.foreach { __v =>
        val __m = __v
        _output__.writeTag(5, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      queryVector.given.foreach { __v =>
        val __m = __v
        _output__.writeTag(6, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      queryVector.indexed.foreach { __v =>
        val __m = __v
        _output__.writeTag(7, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
    }
    def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): com.klibisz.elastiknn.KNearestNeighborsQuery = {
      var __pipelineId = this.pipelineId
      var __processorId = this.processorId
      var __k = this.k
      var __queryOptions = this.queryOptions
      var __queryVector = this.queryVector
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 10 =>
            __pipelineId = _input__.readString()
          case 18 =>
            __processorId = _input__.readString()
          case 24 =>
            __k = _input__.readInt32()
          case 34 =>
            __queryOptions = com.klibisz.elastiknn.KNearestNeighborsQuery.QueryOptions.Exact(_root_.scalapb.LiteParser.readMessage(_input__, queryOptions.exact.getOrElse(com.klibisz.elastiknn.KNearestNeighborsQuery.ExactQueryOptions.defaultInstance)))
          case 42 =>
            __queryOptions = com.klibisz.elastiknn.KNearestNeighborsQuery.QueryOptions.Lsh(_root_.scalapb.LiteParser.readMessage(_input__, queryOptions.lsh.getOrElse(com.klibisz.elastiknn.KNearestNeighborsQuery.LshQueryOptions.defaultInstance)))
          case 50 =>
            __queryVector = com.klibisz.elastiknn.KNearestNeighborsQuery.QueryVector.Given(_root_.scalapb.LiteParser.readMessage(_input__, queryVector.given.getOrElse(com.klibisz.elastiknn.KNearestNeighborsQuery.GivenQueryVector.defaultInstance)))
          case 58 =>
            __queryVector = com.klibisz.elastiknn.KNearestNeighborsQuery.QueryVector.Indexed(_root_.scalapb.LiteParser.readMessage(_input__, queryVector.indexed.getOrElse(com.klibisz.elastiknn.KNearestNeighborsQuery.IndexedQueryVector.defaultInstance)))
          case tag => _input__.skipField(tag)
        }
      }
      com.klibisz.elastiknn.KNearestNeighborsQuery(
          pipelineId = __pipelineId,
          processorId = __processorId,
          k = __k,
          queryOptions = __queryOptions,
          queryVector = __queryVector
      )
    }
    def withPipelineId(__v: _root_.scala.Predef.String): KNearestNeighborsQuery = copy(pipelineId = __v)
    def withProcessorId(__v: _root_.scala.Predef.String): KNearestNeighborsQuery = copy(processorId = __v)
    def withK(__v: _root_.scala.Int): KNearestNeighborsQuery = copy(k = __v)
    def getExact: com.klibisz.elastiknn.KNearestNeighborsQuery.ExactQueryOptions = queryOptions.exact.getOrElse(com.klibisz.elastiknn.KNearestNeighborsQuery.ExactQueryOptions.defaultInstance)
    def withExact(__v: com.klibisz.elastiknn.KNearestNeighborsQuery.ExactQueryOptions): KNearestNeighborsQuery = copy(queryOptions = com.klibisz.elastiknn.KNearestNeighborsQuery.QueryOptions.Exact(__v))
    def getLsh: com.klibisz.elastiknn.KNearestNeighborsQuery.LshQueryOptions = queryOptions.lsh.getOrElse(com.klibisz.elastiknn.KNearestNeighborsQuery.LshQueryOptions.defaultInstance)
    def withLsh(__v: com.klibisz.elastiknn.KNearestNeighborsQuery.LshQueryOptions): KNearestNeighborsQuery = copy(queryOptions = com.klibisz.elastiknn.KNearestNeighborsQuery.QueryOptions.Lsh(__v))
    def getGiven: com.klibisz.elastiknn.KNearestNeighborsQuery.GivenQueryVector = queryVector.given.getOrElse(com.klibisz.elastiknn.KNearestNeighborsQuery.GivenQueryVector.defaultInstance)
    def withGiven(__v: com.klibisz.elastiknn.KNearestNeighborsQuery.GivenQueryVector): KNearestNeighborsQuery = copy(queryVector = com.klibisz.elastiknn.KNearestNeighborsQuery.QueryVector.Given(__v))
    def getIndexed: com.klibisz.elastiknn.KNearestNeighborsQuery.IndexedQueryVector = queryVector.indexed.getOrElse(com.klibisz.elastiknn.KNearestNeighborsQuery.IndexedQueryVector.defaultInstance)
    def withIndexed(__v: com.klibisz.elastiknn.KNearestNeighborsQuery.IndexedQueryVector): KNearestNeighborsQuery = copy(queryVector = com.klibisz.elastiknn.KNearestNeighborsQuery.QueryVector.Indexed(__v))
    def clearQueryOptions: KNearestNeighborsQuery = copy(queryOptions = com.klibisz.elastiknn.KNearestNeighborsQuery.QueryOptions.Empty)
    def withQueryOptions(__v: com.klibisz.elastiknn.KNearestNeighborsQuery.QueryOptions): KNearestNeighborsQuery = copy(queryOptions = __v)
    def clearQueryVector: KNearestNeighborsQuery = copy(queryVector = com.klibisz.elastiknn.KNearestNeighborsQuery.QueryVector.Empty)
    def withQueryVector(__v: com.klibisz.elastiknn.KNearestNeighborsQuery.QueryVector): KNearestNeighborsQuery = copy(queryVector = __v)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => {
          val __t = pipelineId
          if (__t != "") __t else null
        }
        case 2 => {
          val __t = processorId
          if (__t != "") __t else null
        }
        case 3 => {
          val __t = k
          if (__t != 0) __t else null
        }
        case 4 => queryOptions.exact.orNull
        case 5 => queryOptions.lsh.orNull
        case 6 => queryVector.given.orNull
        case 7 => queryVector.indexed.orNull
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => _root_.scalapb.descriptors.PString(pipelineId)
        case 2 => _root_.scalapb.descriptors.PString(processorId)
        case 3 => _root_.scalapb.descriptors.PInt(k)
        case 4 => queryOptions.exact.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 5 => queryOptions.lsh.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 6 => queryVector.given.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 7 => queryVector.indexed.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion = com.klibisz.elastiknn.KNearestNeighborsQuery
}

object KNearestNeighborsQuery extends scalapb.GeneratedMessageCompanion[com.klibisz.elastiknn.KNearestNeighborsQuery] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[com.klibisz.elastiknn.KNearestNeighborsQuery] = this
  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, _root_.scala.Any]): com.klibisz.elastiknn.KNearestNeighborsQuery = {
    _root_.scala.Predef.require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
    val __fields = javaDescriptor.getFields
    com.klibisz.elastiknn.KNearestNeighborsQuery(
      __fieldsMap.getOrElse(__fields.get(0), "").asInstanceOf[_root_.scala.Predef.String],
      __fieldsMap.getOrElse(__fields.get(1), "").asInstanceOf[_root_.scala.Predef.String],
      __fieldsMap.getOrElse(__fields.get(2), 0).asInstanceOf[_root_.scala.Int],
      queryOptions = __fieldsMap.get(__fields.get(3)).asInstanceOf[_root_.scala.Option[com.klibisz.elastiknn.KNearestNeighborsQuery.ExactQueryOptions]].map(com.klibisz.elastiknn.KNearestNeighborsQuery.QueryOptions.Exact)
    .orElse[com.klibisz.elastiknn.KNearestNeighborsQuery.QueryOptions](__fieldsMap.get(__fields.get(4)).asInstanceOf[_root_.scala.Option[com.klibisz.elastiknn.KNearestNeighborsQuery.LshQueryOptions]].map(com.klibisz.elastiknn.KNearestNeighborsQuery.QueryOptions.Lsh))
    .getOrElse(com.klibisz.elastiknn.KNearestNeighborsQuery.QueryOptions.Empty),
      queryVector = __fieldsMap.get(__fields.get(5)).asInstanceOf[_root_.scala.Option[com.klibisz.elastiknn.KNearestNeighborsQuery.GivenQueryVector]].map(com.klibisz.elastiknn.KNearestNeighborsQuery.QueryVector.Given)
    .orElse[com.klibisz.elastiknn.KNearestNeighborsQuery.QueryVector](__fieldsMap.get(__fields.get(6)).asInstanceOf[_root_.scala.Option[com.klibisz.elastiknn.KNearestNeighborsQuery.IndexedQueryVector]].map(com.klibisz.elastiknn.KNearestNeighborsQuery.QueryVector.Indexed))
    .getOrElse(com.klibisz.elastiknn.KNearestNeighborsQuery.QueryVector.Empty)
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[com.klibisz.elastiknn.KNearestNeighborsQuery] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      com.klibisz.elastiknn.KNearestNeighborsQuery(
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).map(_.as[_root_.scala.Int]).getOrElse(0),
        queryOptions = __fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).flatMap(_.as[_root_.scala.Option[com.klibisz.elastiknn.KNearestNeighborsQuery.ExactQueryOptions]]).map(com.klibisz.elastiknn.KNearestNeighborsQuery.QueryOptions.Exact)
    .orElse[com.klibisz.elastiknn.KNearestNeighborsQuery.QueryOptions](__fieldsMap.get(scalaDescriptor.findFieldByNumber(5).get).flatMap(_.as[_root_.scala.Option[com.klibisz.elastiknn.KNearestNeighborsQuery.LshQueryOptions]]).map(com.klibisz.elastiknn.KNearestNeighborsQuery.QueryOptions.Lsh))
    .getOrElse(com.klibisz.elastiknn.KNearestNeighborsQuery.QueryOptions.Empty),
        queryVector = __fieldsMap.get(scalaDescriptor.findFieldByNumber(6).get).flatMap(_.as[_root_.scala.Option[com.klibisz.elastiknn.KNearestNeighborsQuery.GivenQueryVector]]).map(com.klibisz.elastiknn.KNearestNeighborsQuery.QueryVector.Given)
    .orElse[com.klibisz.elastiknn.KNearestNeighborsQuery.QueryVector](__fieldsMap.get(scalaDescriptor.findFieldByNumber(7).get).flatMap(_.as[_root_.scala.Option[com.klibisz.elastiknn.KNearestNeighborsQuery.IndexedQueryVector]]).map(com.klibisz.elastiknn.KNearestNeighborsQuery.QueryVector.Indexed))
    .getOrElse(com.klibisz.elastiknn.KNearestNeighborsQuery.QueryVector.Empty)
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = ElastiknnProto.javaDescriptor.getMessageTypes.get(4)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = ElastiknnProto.scalaDescriptor.messages(4)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
    (__number: @_root_.scala.unchecked) match {
      case 4 => __out = com.klibisz.elastiknn.KNearestNeighborsQuery.ExactQueryOptions
      case 5 => __out = com.klibisz.elastiknn.KNearestNeighborsQuery.LshQueryOptions
      case 6 => __out = com.klibisz.elastiknn.KNearestNeighborsQuery.GivenQueryVector
      case 7 => __out = com.klibisz.elastiknn.KNearestNeighborsQuery.IndexedQueryVector
    }
    __out
  }
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] =
    Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]](
      _root_.com.klibisz.elastiknn.KNearestNeighborsQuery.ExactQueryOptions,
      _root_.com.klibisz.elastiknn.KNearestNeighborsQuery.LshQueryOptions,
      _root_.com.klibisz.elastiknn.KNearestNeighborsQuery.GivenQueryVector,
      _root_.com.klibisz.elastiknn.KNearestNeighborsQuery.IndexedQueryVector
    )
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = com.klibisz.elastiknn.KNearestNeighborsQuery(
  )
  sealed trait QueryOptions extends _root_.scalapb.GeneratedOneof {
    def isEmpty: _root_.scala.Boolean = false
    def isDefined: _root_.scala.Boolean = true
    def isExact: _root_.scala.Boolean = false
    def isLsh: _root_.scala.Boolean = false
    def exact: _root_.scala.Option[com.klibisz.elastiknn.KNearestNeighborsQuery.ExactQueryOptions] = _root_.scala.None
    def lsh: _root_.scala.Option[com.klibisz.elastiknn.KNearestNeighborsQuery.LshQueryOptions] = _root_.scala.None
  }
  object QueryOptions extends {
    @SerialVersionUID(0L)
    case object Empty extends com.klibisz.elastiknn.KNearestNeighborsQuery.QueryOptions {
      type ValueType = _root_.scala.Nothing
      override def isEmpty: _root_.scala.Boolean = true
      override def isDefined: _root_.scala.Boolean = false
      override def number: _root_.scala.Int = 0
      override def value: _root_.scala.Nothing = throw new java.util.NoSuchElementException("Empty.value")
    }
  
    @SerialVersionUID(0L)
    final case class Exact(value: com.klibisz.elastiknn.KNearestNeighborsQuery.ExactQueryOptions) extends com.klibisz.elastiknn.KNearestNeighborsQuery.QueryOptions {
      type ValueType = com.klibisz.elastiknn.KNearestNeighborsQuery.ExactQueryOptions
      override def isExact: _root_.scala.Boolean = true
      override def exact: _root_.scala.Option[com.klibisz.elastiknn.KNearestNeighborsQuery.ExactQueryOptions] = Some(value)
      override def number: _root_.scala.Int = 4
    }
    @SerialVersionUID(0L)
    final case class Lsh(value: com.klibisz.elastiknn.KNearestNeighborsQuery.LshQueryOptions) extends com.klibisz.elastiknn.KNearestNeighborsQuery.QueryOptions {
      type ValueType = com.klibisz.elastiknn.KNearestNeighborsQuery.LshQueryOptions
      override def isLsh: _root_.scala.Boolean = true
      override def lsh: _root_.scala.Option[com.klibisz.elastiknn.KNearestNeighborsQuery.LshQueryOptions] = Some(value)
      override def number: _root_.scala.Int = 5
    }
  }
  sealed trait QueryVector extends _root_.scalapb.GeneratedOneof {
    def isEmpty: _root_.scala.Boolean = false
    def isDefined: _root_.scala.Boolean = true
    def isGiven: _root_.scala.Boolean = false
    def isIndexed: _root_.scala.Boolean = false
    def given: _root_.scala.Option[com.klibisz.elastiknn.KNearestNeighborsQuery.GivenQueryVector] = _root_.scala.None
    def indexed: _root_.scala.Option[com.klibisz.elastiknn.KNearestNeighborsQuery.IndexedQueryVector] = _root_.scala.None
  }
  object QueryVector extends {
    @SerialVersionUID(0L)
    case object Empty extends com.klibisz.elastiknn.KNearestNeighborsQuery.QueryVector {
      type ValueType = _root_.scala.Nothing
      override def isEmpty: _root_.scala.Boolean = true
      override def isDefined: _root_.scala.Boolean = false
      override def number: _root_.scala.Int = 0
      override def value: _root_.scala.Nothing = throw new java.util.NoSuchElementException("Empty.value")
    }
  
    @SerialVersionUID(0L)
    final case class Given(value: com.klibisz.elastiknn.KNearestNeighborsQuery.GivenQueryVector) extends com.klibisz.elastiknn.KNearestNeighborsQuery.QueryVector {
      type ValueType = com.klibisz.elastiknn.KNearestNeighborsQuery.GivenQueryVector
      override def isGiven: _root_.scala.Boolean = true
      override def given: _root_.scala.Option[com.klibisz.elastiknn.KNearestNeighborsQuery.GivenQueryVector] = Some(value)
      override def number: _root_.scala.Int = 6
    }
    @SerialVersionUID(0L)
    final case class Indexed(value: com.klibisz.elastiknn.KNearestNeighborsQuery.IndexedQueryVector) extends com.klibisz.elastiknn.KNearestNeighborsQuery.QueryVector {
      type ValueType = com.klibisz.elastiknn.KNearestNeighborsQuery.IndexedQueryVector
      override def isIndexed: _root_.scala.Boolean = true
      override def indexed: _root_.scala.Option[com.klibisz.elastiknn.KNearestNeighborsQuery.IndexedQueryVector] = Some(value)
      override def number: _root_.scala.Int = 7
    }
  }
  @SerialVersionUID(0L)
  final case class ExactQueryOptions(
      distance: com.klibisz.elastiknn.Distance = com.klibisz.elastiknn.Distance.DISTANCE_INVALID
      ) extends scalapb.GeneratedMessage with scalapb.Message[ExactQueryOptions] with scalapb.lenses.Updatable[ExactQueryOptions] {
      @transient
      private[this] var __serializedSizeCachedValue: _root_.scala.Int = 0
      private[this] def __computeSerializedValue(): _root_.scala.Int = {
        var __size = 0
        
        {
          val __value = distance
          if (__value != com.klibisz.elastiknn.Distance.DISTANCE_INVALID) {
            __size += _root_.com.google.protobuf.CodedOutputStream.computeEnumSize(1, __value.value)
          }
        };
        __size
      }
      final override def serializedSize: _root_.scala.Int = {
        var read = __serializedSizeCachedValue
        if (read == 0) {
          read = __computeSerializedValue()
          __serializedSizeCachedValue = read
        }
        read
      }
      def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
        {
          val __v = distance
          if (__v != com.klibisz.elastiknn.Distance.DISTANCE_INVALID) {
            _output__.writeEnum(1, __v.value)
          }
        };
      }
      def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): com.klibisz.elastiknn.KNearestNeighborsQuery.ExactQueryOptions = {
        var __distance = this.distance
        var _done__ = false
        while (!_done__) {
          val _tag__ = _input__.readTag()
          _tag__ match {
            case 0 => _done__ = true
            case 8 =>
              __distance = com.klibisz.elastiknn.Distance.fromValue(_input__.readEnum())
            case tag => _input__.skipField(tag)
          }
        }
        com.klibisz.elastiknn.KNearestNeighborsQuery.ExactQueryOptions(
            distance = __distance
        )
      }
      def withDistance(__v: com.klibisz.elastiknn.Distance): ExactQueryOptions = copy(distance = __v)
      def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
        (__fieldNumber: @_root_.scala.unchecked) match {
          case 1 => {
            val __t = distance.javaValueDescriptor
            if (__t.getNumber() != 0) __t else null
          }
        }
      }
      def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
        _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
        (__field.number: @_root_.scala.unchecked) match {
          case 1 => _root_.scalapb.descriptors.PEnum(distance.scalaValueDescriptor)
        }
      }
      def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
      def companion = com.klibisz.elastiknn.KNearestNeighborsQuery.ExactQueryOptions
  }
  
  object ExactQueryOptions extends scalapb.GeneratedMessageCompanion[com.klibisz.elastiknn.KNearestNeighborsQuery.ExactQueryOptions] {
    implicit def messageCompanion: scalapb.GeneratedMessageCompanion[com.klibisz.elastiknn.KNearestNeighborsQuery.ExactQueryOptions] = this
    def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, _root_.scala.Any]): com.klibisz.elastiknn.KNearestNeighborsQuery.ExactQueryOptions = {
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
      val __fields = javaDescriptor.getFields
      com.klibisz.elastiknn.KNearestNeighborsQuery.ExactQueryOptions(
        com.klibisz.elastiknn.Distance.fromValue(__fieldsMap.getOrElse(__fields.get(0), com.klibisz.elastiknn.Distance.DISTANCE_INVALID.javaValueDescriptor).asInstanceOf[_root_.com.google.protobuf.Descriptors.EnumValueDescriptor].getNumber)
      )
    }
    implicit def messageReads: _root_.scalapb.descriptors.Reads[com.klibisz.elastiknn.KNearestNeighborsQuery.ExactQueryOptions] = _root_.scalapb.descriptors.Reads{
      case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
        _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
        com.klibisz.elastiknn.KNearestNeighborsQuery.ExactQueryOptions(
          com.klibisz.elastiknn.Distance.fromValue(__fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scalapb.descriptors.EnumValueDescriptor]).getOrElse(com.klibisz.elastiknn.Distance.DISTANCE_INVALID.scalaValueDescriptor).number)
        )
      case _ => throw new RuntimeException("Expected PMessage")
    }
    def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = com.klibisz.elastiknn.KNearestNeighborsQuery.javaDescriptor.getNestedTypes.get(0)
    def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = com.klibisz.elastiknn.KNearestNeighborsQuery.scalaDescriptor.nestedMessages(0)
    def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__number)
    lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
    def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => com.klibisz.elastiknn.Distance
      }
    }
    lazy val defaultInstance = com.klibisz.elastiknn.KNearestNeighborsQuery.ExactQueryOptions(
    )
    implicit class ExactQueryOptionsLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, com.klibisz.elastiknn.KNearestNeighborsQuery.ExactQueryOptions]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, com.klibisz.elastiknn.KNearestNeighborsQuery.ExactQueryOptions](_l) {
      def distance: _root_.scalapb.lenses.Lens[UpperPB, com.klibisz.elastiknn.Distance] = field(_.distance)((c_, f_) => c_.copy(distance = f_))
    }
    final val DISTANCE_FIELD_NUMBER = 1
    def of(
      distance: com.klibisz.elastiknn.Distance
    ): _root_.com.klibisz.elastiknn.KNearestNeighborsQuery.ExactQueryOptions = _root_.com.klibisz.elastiknn.KNearestNeighborsQuery.ExactQueryOptions(
      distance
    )
  }
  
  @SerialVersionUID(0L)
  final case class LshQueryOptions(
      ) extends scalapb.GeneratedMessage with scalapb.Message[LshQueryOptions] with scalapb.lenses.Updatable[LshQueryOptions] {
      final override def serializedSize: _root_.scala.Int = 0
      def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      }
      def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): com.klibisz.elastiknn.KNearestNeighborsQuery.LshQueryOptions = {
        var _done__ = false
        while (!_done__) {
          val _tag__ = _input__.readTag()
          _tag__ match {
            case 0 => _done__ = true
            case tag => _input__.skipField(tag)
          }
        }
        com.klibisz.elastiknn.KNearestNeighborsQuery.LshQueryOptions(
        )
      }
      def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = throw new MatchError(__fieldNumber)
      def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = throw new MatchError(__field)
      def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
      def companion = com.klibisz.elastiknn.KNearestNeighborsQuery.LshQueryOptions
  }
  
  object LshQueryOptions extends scalapb.GeneratedMessageCompanion[com.klibisz.elastiknn.KNearestNeighborsQuery.LshQueryOptions] {
    implicit def messageCompanion: scalapb.GeneratedMessageCompanion[com.klibisz.elastiknn.KNearestNeighborsQuery.LshQueryOptions] = this
    def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, _root_.scala.Any]): com.klibisz.elastiknn.KNearestNeighborsQuery.LshQueryOptions = {
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
      com.klibisz.elastiknn.KNearestNeighborsQuery.LshQueryOptions(
      )
    }
    implicit def messageReads: _root_.scalapb.descriptors.Reads[com.klibisz.elastiknn.KNearestNeighborsQuery.LshQueryOptions] = _root_.scalapb.descriptors.Reads{
      case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
        _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
        com.klibisz.elastiknn.KNearestNeighborsQuery.LshQueryOptions(
        )
      case _ => throw new RuntimeException("Expected PMessage")
    }
    def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = com.klibisz.elastiknn.KNearestNeighborsQuery.javaDescriptor.getNestedTypes.get(1)
    def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = com.klibisz.elastiknn.KNearestNeighborsQuery.scalaDescriptor.nestedMessages(1)
    def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__number)
    lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
    def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
    lazy val defaultInstance = com.klibisz.elastiknn.KNearestNeighborsQuery.LshQueryOptions(
    )
    implicit class LshQueryOptionsLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, com.klibisz.elastiknn.KNearestNeighborsQuery.LshQueryOptions]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, com.klibisz.elastiknn.KNearestNeighborsQuery.LshQueryOptions](_l) {
    }
    def of(
    ): _root_.com.klibisz.elastiknn.KNearestNeighborsQuery.LshQueryOptions = _root_.com.klibisz.elastiknn.KNearestNeighborsQuery.LshQueryOptions(
    )
  }
  
  @SerialVersionUID(0L)
  final case class GivenQueryVector(
      vector: Array[_root_.scala.Double] = Array.empty
      ) extends scalapb.GeneratedMessage with scalapb.Message[GivenQueryVector] with scalapb.lenses.Updatable[GivenQueryVector] {
      private[this] def vectorSerializedSize = {
        8 * vector.size
      }
      @transient
      private[this] var __serializedSizeCachedValue: _root_.scala.Int = 0
      private[this] def __computeSerializedValue(): _root_.scala.Int = {
        var __size = 0
        if(vector.nonEmpty) {
          val __localsize = vectorSerializedSize
          __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__localsize) + __localsize
        }
        __size
      }
      final override def serializedSize: _root_.scala.Int = {
        var read = __serializedSizeCachedValue
        if (read == 0) {
          read = __computeSerializedValue()
          __serializedSizeCachedValue = read
        }
        read
      }
      def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
        if (vector.nonEmpty) {
          _output__.writeTag(1, 2)
          _output__.writeUInt32NoTag(vectorSerializedSize)
          vector.foreach(_output__.writeDoubleNoTag)
        };
      }
      def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): com.klibisz.elastiknn.KNearestNeighborsQuery.GivenQueryVector = {
        val __vector = (Array.newBuilder[_root_.scala.Double] ++= this.vector)
        var _done__ = false
        while (!_done__) {
          val _tag__ = _input__.readTag()
          _tag__ match {
            case 0 => _done__ = true
            case 9 =>
              __vector += _input__.readDouble()
            case 10 => {
              val length = _input__.readRawVarint32()
              val oldLimit = _input__.pushLimit(length)
              while (_input__.getBytesUntilLimit > 0) {
                __vector += _input__.readDouble
              }
              _input__.popLimit(oldLimit)
            }
            case tag => _input__.skipField(tag)
          }
        }
        com.klibisz.elastiknn.KNearestNeighborsQuery.GivenQueryVector(
            vector = __vector.result()
        )
      }
      def clearVector = copy(vector = Array.empty)
      def addVector(__vs: _root_.scala.Double*): GivenQueryVector = addAllVector(__vs)
      def addAllVector(__vs: Iterable[_root_.scala.Double]): GivenQueryVector = copy(vector = vector ++ __vs)
      def withVector(__v: Array[_root_.scala.Double]): GivenQueryVector = copy(vector = __v)
      def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
        (__fieldNumber: @_root_.scala.unchecked) match {
          case 1 => vector
        }
      }
      def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
        _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
        (__field.number: @_root_.scala.unchecked) match {
          case 1 => _root_.scalapb.descriptors.PRepeated(vector.iterator.map(_root_.scalapb.descriptors.PDouble).toVector)
        }
      }
      def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
      def companion = com.klibisz.elastiknn.KNearestNeighborsQuery.GivenQueryVector
  }
  
  object GivenQueryVector extends scalapb.GeneratedMessageCompanion[com.klibisz.elastiknn.KNearestNeighborsQuery.GivenQueryVector] {
    implicit def messageCompanion: scalapb.GeneratedMessageCompanion[com.klibisz.elastiknn.KNearestNeighborsQuery.GivenQueryVector] = this
    def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, _root_.scala.Any]): com.klibisz.elastiknn.KNearestNeighborsQuery.GivenQueryVector = {
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
      val __fields = javaDescriptor.getFields
      com.klibisz.elastiknn.KNearestNeighborsQuery.GivenQueryVector(
        __fieldsMap.getOrElse(__fields.get(0), Nil).asInstanceOf[Array[_root_.scala.Double]]
      )
    }
    implicit def messageReads: _root_.scalapb.descriptors.Reads[com.klibisz.elastiknn.KNearestNeighborsQuery.GivenQueryVector] = _root_.scalapb.descriptors.Reads{
      case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
        _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
        com.klibisz.elastiknn.KNearestNeighborsQuery.GivenQueryVector(
          __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[Array[_root_.scala.Double]]).getOrElse(Array.empty)
        )
      case _ => throw new RuntimeException("Expected PMessage")
    }
    def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = com.klibisz.elastiknn.KNearestNeighborsQuery.javaDescriptor.getNestedTypes.get(2)
    def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = com.klibisz.elastiknn.KNearestNeighborsQuery.scalaDescriptor.nestedMessages(2)
    def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__number)
    lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
    def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
    lazy val defaultInstance = com.klibisz.elastiknn.KNearestNeighborsQuery.GivenQueryVector(
    )
    implicit class GivenQueryVectorLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, com.klibisz.elastiknn.KNearestNeighborsQuery.GivenQueryVector]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, com.klibisz.elastiknn.KNearestNeighborsQuery.GivenQueryVector](_l) {
      def vector: _root_.scalapb.lenses.Lens[UpperPB, Array[_root_.scala.Double]] = field(_.vector)((c_, f_) => c_.copy(vector = f_))
    }
    final val VECTOR_FIELD_NUMBER = 1
    def of(
      vector: Array[_root_.scala.Double]
    ): _root_.com.klibisz.elastiknn.KNearestNeighborsQuery.GivenQueryVector = _root_.com.klibisz.elastiknn.KNearestNeighborsQuery.GivenQueryVector(
      vector
    )
  }
  
  @SerialVersionUID(0L)
  final case class IndexedQueryVector(
      index: _root_.scala.Predef.String = "",
      field: _root_.scala.Predef.String = "",
      id: _root_.scala.Predef.String = ""
      ) extends scalapb.GeneratedMessage with scalapb.Message[IndexedQueryVector] with scalapb.lenses.Updatable[IndexedQueryVector] {
      @transient
      private[this] var __serializedSizeCachedValue: _root_.scala.Int = 0
      private[this] def __computeSerializedValue(): _root_.scala.Int = {
        var __size = 0
        
        {
          val __value = index
          if (__value != "") {
            __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(1, __value)
          }
        };
        
        {
          val __value = field
          if (__value != "") {
            __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(2, __value)
          }
        };
        
        {
          val __value = id
          if (__value != "") {
            __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(3, __value)
          }
        };
        __size
      }
      final override def serializedSize: _root_.scala.Int = {
        var read = __serializedSizeCachedValue
        if (read == 0) {
          read = __computeSerializedValue()
          __serializedSizeCachedValue = read
        }
        read
      }
      def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
        {
          val __v = index
          if (__v != "") {
            _output__.writeString(1, __v)
          }
        };
        {
          val __v = field
          if (__v != "") {
            _output__.writeString(2, __v)
          }
        };
        {
          val __v = id
          if (__v != "") {
            _output__.writeString(3, __v)
          }
        };
      }
      def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): com.klibisz.elastiknn.KNearestNeighborsQuery.IndexedQueryVector = {
        var __index = this.index
        var __field = this.field
        var __id = this.id
        var _done__ = false
        while (!_done__) {
          val _tag__ = _input__.readTag()
          _tag__ match {
            case 0 => _done__ = true
            case 10 =>
              __index = _input__.readString()
            case 18 =>
              __field = _input__.readString()
            case 26 =>
              __id = _input__.readString()
            case tag => _input__.skipField(tag)
          }
        }
        com.klibisz.elastiknn.KNearestNeighborsQuery.IndexedQueryVector(
            index = __index,
            field = __field,
            id = __id
        )
      }
      def withIndex(__v: _root_.scala.Predef.String): IndexedQueryVector = copy(index = __v)
      def withField(__v: _root_.scala.Predef.String): IndexedQueryVector = copy(field = __v)
      def withId(__v: _root_.scala.Predef.String): IndexedQueryVector = copy(id = __v)
      def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
        (__fieldNumber: @_root_.scala.unchecked) match {
          case 1 => {
            val __t = index
            if (__t != "") __t else null
          }
          case 2 => {
            val __t = field
            if (__t != "") __t else null
          }
          case 3 => {
            val __t = id
            if (__t != "") __t else null
          }
        }
      }
      def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
        _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
        (__field.number: @_root_.scala.unchecked) match {
          case 1 => _root_.scalapb.descriptors.PString(index)
          case 2 => _root_.scalapb.descriptors.PString(field)
          case 3 => _root_.scalapb.descriptors.PString(id)
        }
      }
      def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
      def companion = com.klibisz.elastiknn.KNearestNeighborsQuery.IndexedQueryVector
  }
  
  object IndexedQueryVector extends scalapb.GeneratedMessageCompanion[com.klibisz.elastiknn.KNearestNeighborsQuery.IndexedQueryVector] {
    implicit def messageCompanion: scalapb.GeneratedMessageCompanion[com.klibisz.elastiknn.KNearestNeighborsQuery.IndexedQueryVector] = this
    def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, _root_.scala.Any]): com.klibisz.elastiknn.KNearestNeighborsQuery.IndexedQueryVector = {
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
      val __fields = javaDescriptor.getFields
      com.klibisz.elastiknn.KNearestNeighborsQuery.IndexedQueryVector(
        __fieldsMap.getOrElse(__fields.get(0), "").asInstanceOf[_root_.scala.Predef.String],
        __fieldsMap.getOrElse(__fields.get(1), "").asInstanceOf[_root_.scala.Predef.String],
        __fieldsMap.getOrElse(__fields.get(2), "").asInstanceOf[_root_.scala.Predef.String]
      )
    }
    implicit def messageReads: _root_.scalapb.descriptors.Reads[com.klibisz.elastiknn.KNearestNeighborsQuery.IndexedQueryVector] = _root_.scalapb.descriptors.Reads{
      case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
        _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
        com.klibisz.elastiknn.KNearestNeighborsQuery.IndexedQueryVector(
          __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
          __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
          __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).map(_.as[_root_.scala.Predef.String]).getOrElse("")
        )
      case _ => throw new RuntimeException("Expected PMessage")
    }
    def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = com.klibisz.elastiknn.KNearestNeighborsQuery.javaDescriptor.getNestedTypes.get(3)
    def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = com.klibisz.elastiknn.KNearestNeighborsQuery.scalaDescriptor.nestedMessages(3)
    def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__number)
    lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
    def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
    lazy val defaultInstance = com.klibisz.elastiknn.KNearestNeighborsQuery.IndexedQueryVector(
    )
    implicit class IndexedQueryVectorLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, com.klibisz.elastiknn.KNearestNeighborsQuery.IndexedQueryVector]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, com.klibisz.elastiknn.KNearestNeighborsQuery.IndexedQueryVector](_l) {
      def index: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.index)((c_, f_) => c_.copy(index = f_))
      def field: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.field)((c_, f_) => c_.copy(field = f_))
      def id: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.id)((c_, f_) => c_.copy(id = f_))
    }
    final val INDEX_FIELD_NUMBER = 1
    final val FIELD_FIELD_NUMBER = 2
    final val ID_FIELD_NUMBER = 3
    def of(
      index: _root_.scala.Predef.String,
      field: _root_.scala.Predef.String,
      id: _root_.scala.Predef.String
    ): _root_.com.klibisz.elastiknn.KNearestNeighborsQuery.IndexedQueryVector = _root_.com.klibisz.elastiknn.KNearestNeighborsQuery.IndexedQueryVector(
      index,
      field,
      id
    )
  }
  
  implicit class KNearestNeighborsQueryLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, com.klibisz.elastiknn.KNearestNeighborsQuery]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, com.klibisz.elastiknn.KNearestNeighborsQuery](_l) {
    def pipelineId: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.pipelineId)((c_, f_) => c_.copy(pipelineId = f_))
    def processorId: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.processorId)((c_, f_) => c_.copy(processorId = f_))
    def k: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Int] = field(_.k)((c_, f_) => c_.copy(k = f_))
    def exact: _root_.scalapb.lenses.Lens[UpperPB, com.klibisz.elastiknn.KNearestNeighborsQuery.ExactQueryOptions] = field(_.getExact)((c_, f_) => c_.copy(queryOptions = com.klibisz.elastiknn.KNearestNeighborsQuery.QueryOptions.Exact(f_)))
    def lsh: _root_.scalapb.lenses.Lens[UpperPB, com.klibisz.elastiknn.KNearestNeighborsQuery.LshQueryOptions] = field(_.getLsh)((c_, f_) => c_.copy(queryOptions = com.klibisz.elastiknn.KNearestNeighborsQuery.QueryOptions.Lsh(f_)))
    def given: _root_.scalapb.lenses.Lens[UpperPB, com.klibisz.elastiknn.KNearestNeighborsQuery.GivenQueryVector] = field(_.getGiven)((c_, f_) => c_.copy(queryVector = com.klibisz.elastiknn.KNearestNeighborsQuery.QueryVector.Given(f_)))
    def indexed: _root_.scalapb.lenses.Lens[UpperPB, com.klibisz.elastiknn.KNearestNeighborsQuery.IndexedQueryVector] = field(_.getIndexed)((c_, f_) => c_.copy(queryVector = com.klibisz.elastiknn.KNearestNeighborsQuery.QueryVector.Indexed(f_)))
    def queryOptions: _root_.scalapb.lenses.Lens[UpperPB, com.klibisz.elastiknn.KNearestNeighborsQuery.QueryOptions] = field(_.queryOptions)((c_, f_) => c_.copy(queryOptions = f_))
    def queryVector: _root_.scalapb.lenses.Lens[UpperPB, com.klibisz.elastiknn.KNearestNeighborsQuery.QueryVector] = field(_.queryVector)((c_, f_) => c_.copy(queryVector = f_))
  }
  final val PIPELINE_ID_FIELD_NUMBER = 1
  final val PROCESSOR_ID_FIELD_NUMBER = 2
  final val K_FIELD_NUMBER = 3
  final val EXACT_FIELD_NUMBER = 4
  final val LSH_FIELD_NUMBER = 5
  final val GIVEN_FIELD_NUMBER = 6
  final val INDEXED_FIELD_NUMBER = 7
  def of(
    pipelineId: _root_.scala.Predef.String,
    processorId: _root_.scala.Predef.String,
    k: _root_.scala.Int,
    queryOptions: com.klibisz.elastiknn.KNearestNeighborsQuery.QueryOptions,
    queryVector: com.klibisz.elastiknn.KNearestNeighborsQuery.QueryVector
  ): _root_.com.klibisz.elastiknn.KNearestNeighborsQuery = _root_.com.klibisz.elastiknn.KNearestNeighborsQuery(
    pipelineId,
    processorId,
    k,
    queryOptions,
    queryVector
  )
}
