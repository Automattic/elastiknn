// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package com.klibisz.elastiknn

/** Structure of vectors which have been processed.
  */
@SerialVersionUID(0L)
final case class ProcessedVector(
    processed: com.klibisz.elastiknn.ProcessedVector.Processed = com.klibisz.elastiknn.ProcessedVector.Processed.Empty
    ) extends scalapb.GeneratedMessage with scalapb.Message[ProcessedVector] with scalapb.lenses.Updatable[ProcessedVector] {
    @transient
    private[this] var __serializedSizeCachedValue: _root_.scala.Int = 0
    private[this] def __computeSerializedValue(): _root_.scala.Int = {
      var __size = 0
      if (processed.exact.isDefined) {
        val __value = processed.exact.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      __size
    }
    final override def serializedSize: _root_.scala.Int = {
      var read = __serializedSizeCachedValue
      if (read == 0) {
        read = __computeSerializedValue()
        __serializedSizeCachedValue = read
      }
      read
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      processed.exact.foreach { __v =>
        val __m = __v
        _output__.writeTag(1, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
    }
    def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): com.klibisz.elastiknn.ProcessedVector = {
      var __processed = this.processed
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 10 =>
            __processed = com.klibisz.elastiknn.ProcessedVector.Processed.Exact(_root_.scalapb.LiteParser.readMessage(_input__, processed.exact.getOrElse(com.klibisz.elastiknn.ProcessedVector.ExactVector.defaultInstance)))
          case tag => _input__.skipField(tag)
        }
      }
      com.klibisz.elastiknn.ProcessedVector(
          processed = __processed
      )
    }
    def getExact: com.klibisz.elastiknn.ProcessedVector.ExactVector = processed.exact.getOrElse(com.klibisz.elastiknn.ProcessedVector.ExactVector.defaultInstance)
    def withExact(__v: com.klibisz.elastiknn.ProcessedVector.ExactVector): ProcessedVector = copy(processed = com.klibisz.elastiknn.ProcessedVector.Processed.Exact(__v))
    def clearProcessed: ProcessedVector = copy(processed = com.klibisz.elastiknn.ProcessedVector.Processed.Empty)
    def withProcessed(__v: com.klibisz.elastiknn.ProcessedVector.Processed): ProcessedVector = copy(processed = __v)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => processed.exact.orNull
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => processed.exact.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion = com.klibisz.elastiknn.ProcessedVector
}

object ProcessedVector extends scalapb.GeneratedMessageCompanion[com.klibisz.elastiknn.ProcessedVector] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[com.klibisz.elastiknn.ProcessedVector] = this
  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, _root_.scala.Any]): com.klibisz.elastiknn.ProcessedVector = {
    _root_.scala.Predef.require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
    val __fields = javaDescriptor.getFields
    com.klibisz.elastiknn.ProcessedVector(
      processed = __fieldsMap.get(__fields.get(0)).asInstanceOf[_root_.scala.Option[com.klibisz.elastiknn.ProcessedVector.ExactVector]].map(com.klibisz.elastiknn.ProcessedVector.Processed.Exact)
    .getOrElse(com.klibisz.elastiknn.ProcessedVector.Processed.Empty)
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[com.klibisz.elastiknn.ProcessedVector] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      com.klibisz.elastiknn.ProcessedVector(
        processed = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).flatMap(_.as[_root_.scala.Option[com.klibisz.elastiknn.ProcessedVector.ExactVector]]).map(com.klibisz.elastiknn.ProcessedVector.Processed.Exact)
    .getOrElse(com.klibisz.elastiknn.ProcessedVector.Processed.Empty)
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = ElastiknnProto.javaDescriptor.getMessageTypes.get(3)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = ElastiknnProto.scalaDescriptor.messages(3)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
    (__number: @_root_.scala.unchecked) match {
      case 1 => __out = com.klibisz.elastiknn.ProcessedVector.ExactVector
    }
    __out
  }
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] =
    Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]](
      _root_.com.klibisz.elastiknn.ProcessedVector.ExactVector
    )
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = com.klibisz.elastiknn.ProcessedVector(
  )
  sealed trait Processed extends _root_.scalapb.GeneratedOneof {
    def isEmpty: _root_.scala.Boolean = false
    def isDefined: _root_.scala.Boolean = true
    def isExact: _root_.scala.Boolean = false
    def exact: _root_.scala.Option[com.klibisz.elastiknn.ProcessedVector.ExactVector] = _root_.scala.None
  }
  object Processed extends {
    @SerialVersionUID(0L)
    case object Empty extends com.klibisz.elastiknn.ProcessedVector.Processed {
      type ValueType = _root_.scala.Nothing
      override def isEmpty: _root_.scala.Boolean = true
      override def isDefined: _root_.scala.Boolean = false
      override def number: _root_.scala.Int = 0
      override def value: _root_.scala.Nothing = throw new java.util.NoSuchElementException("Empty.value")
    }
  
    @SerialVersionUID(0L)
    final case class Exact(value: com.klibisz.elastiknn.ProcessedVector.ExactVector) extends com.klibisz.elastiknn.ProcessedVector.Processed {
      type ValueType = com.klibisz.elastiknn.ProcessedVector.ExactVector
      override def isExact: _root_.scala.Boolean = true
      override def exact: _root_.scala.Option[com.klibisz.elastiknn.ProcessedVector.ExactVector] = Some(value)
      override def number: _root_.scala.Int = 1
    }
  }
  @SerialVersionUID(0L)
  final case class ExactVector(
      vector: Array[_root_.scala.Double] = Array.empty
      ) extends scalapb.GeneratedMessage with scalapb.Message[ExactVector] with scalapb.lenses.Updatable[ExactVector] {
      private[this] def vectorSerializedSize = {
        8 * vector.size
      }
      @transient
      private[this] var __serializedSizeCachedValue: _root_.scala.Int = 0
      private[this] def __computeSerializedValue(): _root_.scala.Int = {
        var __size = 0
        if(vector.nonEmpty) {
          val __localsize = vectorSerializedSize
          __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__localsize) + __localsize
        }
        __size
      }
      final override def serializedSize: _root_.scala.Int = {
        var read = __serializedSizeCachedValue
        if (read == 0) {
          read = __computeSerializedValue()
          __serializedSizeCachedValue = read
        }
        read
      }
      def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
        if (vector.nonEmpty) {
          _output__.writeTag(1, 2)
          _output__.writeUInt32NoTag(vectorSerializedSize)
          vector.foreach(_output__.writeDoubleNoTag)
        };
      }
      def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): com.klibisz.elastiknn.ProcessedVector.ExactVector = {
        val __vector = (Array.newBuilder[_root_.scala.Double] ++= this.vector)
        var _done__ = false
        while (!_done__) {
          val _tag__ = _input__.readTag()
          _tag__ match {
            case 0 => _done__ = true
            case 9 =>
              __vector += _input__.readDouble()
            case 10 => {
              val length = _input__.readRawVarint32()
              val oldLimit = _input__.pushLimit(length)
              while (_input__.getBytesUntilLimit > 0) {
                __vector += _input__.readDouble
              }
              _input__.popLimit(oldLimit)
            }
            case tag => _input__.skipField(tag)
          }
        }
        com.klibisz.elastiknn.ProcessedVector.ExactVector(
            vector = __vector.result()
        )
      }
      def clearVector = copy(vector = Array.empty)
      def addVector(__vs: _root_.scala.Double*): ExactVector = addAllVector(__vs)
      def addAllVector(__vs: Iterable[_root_.scala.Double]): ExactVector = copy(vector = vector ++ __vs)
      def withVector(__v: Array[_root_.scala.Double]): ExactVector = copy(vector = __v)
      def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
        (__fieldNumber: @_root_.scala.unchecked) match {
          case 1 => vector
        }
      }
      def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
        _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
        (__field.number: @_root_.scala.unchecked) match {
          case 1 => _root_.scalapb.descriptors.PRepeated(vector.iterator.map(_root_.scalapb.descriptors.PDouble).toVector)
        }
      }
      def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
      def companion = com.klibisz.elastiknn.ProcessedVector.ExactVector
  }
  
  object ExactVector extends scalapb.GeneratedMessageCompanion[com.klibisz.elastiknn.ProcessedVector.ExactVector] {
    implicit def messageCompanion: scalapb.GeneratedMessageCompanion[com.klibisz.elastiknn.ProcessedVector.ExactVector] = this
    def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, _root_.scala.Any]): com.klibisz.elastiknn.ProcessedVector.ExactVector = {
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
      val __fields = javaDescriptor.getFields
      com.klibisz.elastiknn.ProcessedVector.ExactVector(
        __fieldsMap.getOrElse(__fields.get(0), Nil).asInstanceOf[Array[_root_.scala.Double]]
      )
    }
    implicit def messageReads: _root_.scalapb.descriptors.Reads[com.klibisz.elastiknn.ProcessedVector.ExactVector] = _root_.scalapb.descriptors.Reads{
      case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
        _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
        com.klibisz.elastiknn.ProcessedVector.ExactVector(
          __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[Array[_root_.scala.Double]]).getOrElse(Array.empty)
        )
      case _ => throw new RuntimeException("Expected PMessage")
    }
    def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = com.klibisz.elastiknn.ProcessedVector.javaDescriptor.getNestedTypes.get(0)
    def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = com.klibisz.elastiknn.ProcessedVector.scalaDescriptor.nestedMessages(0)
    def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__number)
    lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
    def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
    lazy val defaultInstance = com.klibisz.elastiknn.ProcessedVector.ExactVector(
    )
    implicit class ExactVectorLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, com.klibisz.elastiknn.ProcessedVector.ExactVector]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, com.klibisz.elastiknn.ProcessedVector.ExactVector](_l) {
      def vector: _root_.scalapb.lenses.Lens[UpperPB, Array[_root_.scala.Double]] = field(_.vector)((c_, f_) => c_.copy(vector = f_))
    }
    final val VECTOR_FIELD_NUMBER = 1
    def of(
      vector: Array[_root_.scala.Double]
    ): _root_.com.klibisz.elastiknn.ProcessedVector.ExactVector = _root_.com.klibisz.elastiknn.ProcessedVector.ExactVector(
      vector
    )
  }
  
  implicit class ProcessedVectorLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, com.klibisz.elastiknn.ProcessedVector]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, com.klibisz.elastiknn.ProcessedVector](_l) {
    def exact: _root_.scalapb.lenses.Lens[UpperPB, com.klibisz.elastiknn.ProcessedVector.ExactVector] = field(_.getExact)((c_, f_) => c_.copy(processed = com.klibisz.elastiknn.ProcessedVector.Processed.Exact(f_)))
    def processed: _root_.scalapb.lenses.Lens[UpperPB, com.klibisz.elastiknn.ProcessedVector.Processed] = field(_.processed)((c_, f_) => c_.copy(processed = f_))
  }
  final val EXACT_FIELD_NUMBER = 1
  def of(
    processed: com.klibisz.elastiknn.ProcessedVector.Processed
  ): _root_.com.klibisz.elastiknn.ProcessedVector = _root_.com.klibisz.elastiknn.ProcessedVector(
    processed
  )
}
