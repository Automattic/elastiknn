// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package com.klibisz.elastiknn

/** @param seed
  *   Hash functions for hashing incoming vectors are determined by this seed.
  * @param distance
  *   The distance function used for queries. This has to be given up-front as it determines how the vector gets processed.
  * @param k
  *   Placeholders.. need to come back and get the exact lsh parameters straight. It's been a while since I learned it.
  */
@SerialVersionUID(0L)
final case class LshModelOptions(
    seed: _root_.scala.Long = 0L,
    distance: com.klibisz.elastiknn.Distance = com.klibisz.elastiknn.Distance.DISTANCE_INVALID,
    k: _root_.scala.Int = 0,
    l: _root_.scala.Int = 0
    ) extends scalapb.GeneratedMessage with scalapb.Message[LshModelOptions] with scalapb.lenses.Updatable[LshModelOptions] {
    @transient
    private[this] var __serializedSizeCachedValue: _root_.scala.Int = 0
    private[this] def __computeSerializedValue(): _root_.scala.Int = {
      var __size = 0
      
      {
        val __value = seed
        if (__value != 0L) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeInt64Size(1, __value)
        }
      };
      
      {
        val __value = distance
        if (__value != com.klibisz.elastiknn.Distance.DISTANCE_INVALID) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeEnumSize(2, __value.value)
        }
      };
      
      {
        val __value = k
        if (__value != 0) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeInt32Size(3, __value)
        }
      };
      
      {
        val __value = l
        if (__value != 0) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeInt32Size(4, __value)
        }
      };
      __size
    }
    final override def serializedSize: _root_.scala.Int = {
      var read = __serializedSizeCachedValue
      if (read == 0) {
        read = __computeSerializedValue()
        __serializedSizeCachedValue = read
      }
      read
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      {
        val __v = seed
        if (__v != 0L) {
          _output__.writeInt64(1, __v)
        }
      };
      {
        val __v = distance
        if (__v != com.klibisz.elastiknn.Distance.DISTANCE_INVALID) {
          _output__.writeEnum(2, __v.value)
        }
      };
      {
        val __v = k
        if (__v != 0) {
          _output__.writeInt32(3, __v)
        }
      };
      {
        val __v = l
        if (__v != 0) {
          _output__.writeInt32(4, __v)
        }
      };
    }
    def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): com.klibisz.elastiknn.LshModelOptions = {
      var __seed = this.seed
      var __distance = this.distance
      var __k = this.k
      var __l = this.l
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 8 =>
            __seed = _input__.readInt64()
          case 16 =>
            __distance = com.klibisz.elastiknn.Distance.fromValue(_input__.readEnum())
          case 24 =>
            __k = _input__.readInt32()
          case 32 =>
            __l = _input__.readInt32()
          case tag => _input__.skipField(tag)
        }
      }
      com.klibisz.elastiknn.LshModelOptions(
          seed = __seed,
          distance = __distance,
          k = __k,
          l = __l
      )
    }
    def withSeed(__v: _root_.scala.Long): LshModelOptions = copy(seed = __v)
    def withDistance(__v: com.klibisz.elastiknn.Distance): LshModelOptions = copy(distance = __v)
    def withK(__v: _root_.scala.Int): LshModelOptions = copy(k = __v)
    def withL(__v: _root_.scala.Int): LshModelOptions = copy(l = __v)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => {
          val __t = seed
          if (__t != 0L) __t else null
        }
        case 2 => {
          val __t = distance.javaValueDescriptor
          if (__t.getNumber() != 0) __t else null
        }
        case 3 => {
          val __t = k
          if (__t != 0) __t else null
        }
        case 4 => {
          val __t = l
          if (__t != 0) __t else null
        }
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => _root_.scalapb.descriptors.PLong(seed)
        case 2 => _root_.scalapb.descriptors.PEnum(distance.scalaValueDescriptor)
        case 3 => _root_.scalapb.descriptors.PInt(k)
        case 4 => _root_.scalapb.descriptors.PInt(l)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion = com.klibisz.elastiknn.LshModelOptions
}

object LshModelOptions extends scalapb.GeneratedMessageCompanion[com.klibisz.elastiknn.LshModelOptions] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[com.klibisz.elastiknn.LshModelOptions] = this
  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, _root_.scala.Any]): com.klibisz.elastiknn.LshModelOptions = {
    _root_.scala.Predef.require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
    val __fields = javaDescriptor.getFields
    com.klibisz.elastiknn.LshModelOptions(
      __fieldsMap.getOrElse(__fields.get(0), 0L).asInstanceOf[_root_.scala.Long],
      com.klibisz.elastiknn.Distance.fromValue(__fieldsMap.getOrElse(__fields.get(1), com.klibisz.elastiknn.Distance.DISTANCE_INVALID.javaValueDescriptor).asInstanceOf[_root_.com.google.protobuf.Descriptors.EnumValueDescriptor].getNumber),
      __fieldsMap.getOrElse(__fields.get(2), 0).asInstanceOf[_root_.scala.Int],
      __fieldsMap.getOrElse(__fields.get(3), 0).asInstanceOf[_root_.scala.Int]
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[com.klibisz.elastiknn.LshModelOptions] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      com.klibisz.elastiknn.LshModelOptions(
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Long]).getOrElse(0L),
        com.klibisz.elastiknn.Distance.fromValue(__fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.scalapb.descriptors.EnumValueDescriptor]).getOrElse(com.klibisz.elastiknn.Distance.DISTANCE_INVALID.scalaValueDescriptor).number),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).map(_.as[_root_.scala.Int]).getOrElse(0),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).map(_.as[_root_.scala.Int]).getOrElse(0)
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = ElastiknnProto.javaDescriptor.getMessageTypes.get(2)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = ElastiknnProto.scalaDescriptor.messages(2)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__number)
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = {
    (__fieldNumber: @_root_.scala.unchecked) match {
      case 2 => com.klibisz.elastiknn.Distance
    }
  }
  lazy val defaultInstance = com.klibisz.elastiknn.LshModelOptions(
  )
  implicit class LshModelOptionsLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, com.klibisz.elastiknn.LshModelOptions]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, com.klibisz.elastiknn.LshModelOptions](_l) {
    def seed: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Long] = field(_.seed)((c_, f_) => c_.copy(seed = f_))
    def distance: _root_.scalapb.lenses.Lens[UpperPB, com.klibisz.elastiknn.Distance] = field(_.distance)((c_, f_) => c_.copy(distance = f_))
    def k: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Int] = field(_.k)((c_, f_) => c_.copy(k = f_))
    def l: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Int] = field(_.l)((c_, f_) => c_.copy(l = f_))
  }
  final val SEED_FIELD_NUMBER = 1
  final val DISTANCE_FIELD_NUMBER = 2
  final val K_FIELD_NUMBER = 3
  final val L_FIELD_NUMBER = 4
  def of(
    seed: _root_.scala.Long,
    distance: com.klibisz.elastiknn.Distance,
    k: _root_.scala.Int,
    l: _root_.scala.Int
  ): _root_.com.klibisz.elastiknn.LshModelOptions = _root_.com.klibisz.elastiknn.LshModelOptions(
    seed,
    distance,
    k,
    l
  )
}
