
buildscript {
    repositories {
        mavenLocal()
        mavenCentral()
        jcenter()
    }
    dependencies {
        classpath "org.elasticsearch.gradle:build-tools:${esVersion}"
        classpath 'com.google.protobuf:protobuf-gradle-plugin:0.8.8'
    }
}

plugins {
    id 'com.google.protobuf' version '0.8.8'
    id 'scala'
}

repositories {
    jcenter()
}

group = rootProject.properties['group']
version = rootProject.properties['pluginVersion'] + '_es' + esVersion

ext {
    scalapbVersion = '0.9.0-M5'
}

apply plugin: 'java'
apply plugin: 'scala'
//apply plugin: 'idea'
apply plugin: 'elasticsearch.esplugin'

licenseFile = rootProject.file("LICENSE.txt")
noticeFile = rootProject.file("NOTICE.txt")

dependencyLicenses.enabled = false
thirdPartyAudit.enabled = false
licenseHeaders.enabled = false
testingConventions.enabled = false

configurations {
    all {
        resolutionStrategy.preferProjectModules()
    }
}

dependencies {
    runtime 'org.scala-lang:scala-library:2.12.8'
    implementation 'org.scala-lang:scala-library:2.12.8'
    runtime "com.thesamet.scalapb:scalapb-runtime_2.12:${scalapbVersion}"
    implementation "com.thesamet.scalapb:scalapb-runtime_2.12:${scalapbVersion}"
    implementation 'io.github.scalapb-json:scalapb-circe_2.12:0.5.1'
    runtime 'io.github.scalapb-json:scalapb-circe_2.12:0.5.1'
    implementation 'io.circe:circe-generic_2.12:0.12.2'
    implementation 'com.sksamuel.elastic4s:elastic4s-client-esjava_2.12:7.3.1'
//    implementation 'com.carrotsearch:hppc:0.8.1'
    implementation 'com.google.guava:guava:28.1-jre'
    runtime 'com.google.guava:guava:28.1-jre'
//    runtime 'org.elasticsearch.client:elasticsearch-rest-client:7.4.0'
    testImplementation "org.codelibs.elasticsearch.module:lang-painless:${esVersion}"
    testImplementation 'org.scalatest:scalatest_2.12:3.0.8'
}

esplugin {
    name 'elastiknn'
    description 'Ingest processor and queries for exact and approximate nearest neighbors search'
    classname 'com.klibisz.elastiknn.ElastiKnnPlugin'
    licenseFile rootProject.file('LICENSE.txt')
    noticeFile rootProject.file('NOTICE.txt')
}

test {
    jvmArgs '-Dtests.security.manager=false', '-Des.foreground=true'
}

integTestRunner {
    jvmArgs '-Dtests.security.manager=false', '-Des.foreground=true'
}

protobuf {
    protoc {
        artifact = 'com.google.protobuf:protoc:3.7.1'
    }
    plugins {
        scalapb {
            artifact = (org.gradle.nativeplatform.platform.internal.DefaultNativePlatform.getCurrentOperatingSystem().isWindows()) ?
                    "com.thesamet.scalapb:protoc-gen-scalapb:${scalapbVersion}:windows@bat" :
                    "com.thesamet.scalapb:protoc-gen-scalapb:${scalapbVersion}:unix@sh"
        }
    }

    generateProtoTasks {
        all().each { task ->
            task.builtins {
                remove java
            }
            task.plugins {
                scalapb {
                    // add any ScalaPB generator options here. See: https://scalapb.github.io/scalapbc.html#passing-generator-parameters
                    option 'flat_package'
                }
            }
        }
    }
}

// Add geneated Scala code as a source directory
sourceSets {
    main {
        scala {
            srcDirs "${protobuf.generatedFilesBaseDir}/main/scalapb"
        }
    }
}